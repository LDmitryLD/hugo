// Code generated by mockery v2.35.4. DO NOT EDIT.

package mocks

import (
	models "projects/LDmitryLD/hugoproxy/proxy/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// SQLAdapterer is an autogenerated mock type for the SQLAdapterer type
type SQLAdapterer struct {
	mock.Mock
}

// Insert provides a mock function with given fields: query, lat, lon
func (_m *SQLAdapterer) Insert(query string, lat string, lon string) error {
	ret := _m.Called(query, lat, lon)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(query, lat, lon)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Select provides a mock function with given fields: query
func (_m *SQLAdapterer) Select(query string) (models.Address, error) {
	ret := _m.Called(query)

	var r0 models.Address
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.Address, error)); ok {
		return rf(query)
	}
	if rf, ok := ret.Get(0).(func(string) models.Address); ok {
		r0 = rf(query)
	} else {
		r0 = ret.Get(0).(models.Address)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSQLAdapterer creates a new instance of SQLAdapterer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSQLAdapterer(t interface {
	mock.TestingT
	Cleanup(func())
}) *SQLAdapterer {
	mock := &SQLAdapterer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
